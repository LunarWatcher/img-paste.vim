*imgpaste*       A plugin for pasting images into files, similar to modern editors
*img-paste* *img-paste.vim*

License: MIT
URL: https://github.com/LunarWatcher/img-paste.vim
        
================================================================================
Table of contents~

    1. Introduction ......................... |imgpaste-introduction|
        1.1. What imgpaste is not ........... |imgpaste-not|
    2. Supported formats .................... |imgpaste-formats|
        2.1. Built-in formats ............... |imgpaste-builtin-formats|
    3. Config options ....................... |imgpaste-config|
         .................................... |g:ImgpasteFormatMap|
         .................................... |g:ImgpasteFormatters|
    4. Custom formatters .................... |imgpaste-formatters|
        4.1. Built-in formatters ............ |imgpaste-builtin-formatters|
        4.2. Defining a formatter ........... |imgpaste-define-formatter|
    5. Keybinds ............................. |imgpaste-keybinds|
    6. API functions ........................ |imgpaste-functions|
         .................................... |imgpaste#InsertImage|

================================================================================
1. Introduction                                            *imgpaste-introduction*



--------------------------------------------------------------------------------
1.1. What imgpaste is not                                           *imgpaste-not*

While imgpaste allows you to paste images, it does not render these images. If
you want to render images within vim, you're using the wrong editor.
There are plugins that deal with image previewing (including a few promising
ones), but these are heavily terminal- or OS-dependent (or even both). 

There are improvements being made in this area in general, though it'll take a
while before any of it makes it to Vim. Particularly
    https://github.com/libsixel/libsixel
is promising. However, until anything is standardised, getting image preview
support directly into Vim is unlikely.

There are cross-platform plugins that deal with external markdown previewing,
however. This notably includes
    https://github.com/iamcco/markdown-preview.nvim

Unfortunately, it starts a webserver, so it's not a particularly light-weight
plugin. There are several plugins doing this, so there's probably lighter
alternatives if you really need previewing.

================================================================================
2. Supported formats                                            *imgpaste-formats*

--------------------------------------------------------------------------------
2.1. Built-in formats                                   *imgpaste-builtin-formats*

Out-of-the-box, the following formats are supported:

* Markdown (enabled in filetypes: markdown)
* LaTeX (enabled in filetypes: tex)

================================================================================
3. Config options                                                *imgpaste-config*

--------------------------------------------------------------------------------
                                                             *g:ImgpasteFormatMap*
                                                             dict

Format: >
    { 'filetype': 'imgpaste-specific format identifier' }
<

Default: See source definition

Note: This default will always be present. You can modify the defaults by
overriding them in your .vimrc, but there's no way to remove entries from this
map.

If you want to add another filetype to use an already-existing formatter, this
is the map you modify. For example, if you want to paste images into a C++ file,
and use the markdown formatter for it, you'd use: >
    let g:ImgpasteFormatMap = { 'cpp': 'markdown' }
<

If you want to expand with a custom format, see |imgpaste-formatters|.

--------------------------------------------------------------------------------
                                                            *g:ImgpasteFormatters*
                                                            dict

Format: >
    { 'format_name': funcref(YourFuncName) }
<
Note that the function must adhere to |imgpaste-formatter-function|

================================================================================
4. Custom formatters                                         *imgpaste-formatters*

One of the key features of this fork is the arbitrary extensibility of
formatters; while an unofficial goal for this plugin is to support as many
filetypes as possible, there are reasons to have non-standard formatters.

You could have a project with weird standards, you could have your own, personal
preferences for how something should be pasted, or want to expand with
additional features not enabled out-of-the-box. One example is LaTeX; by
default, just the \includegraphics statement is inserted. However, if you want a
full figure to be inserted, write a custom LaTeX formatter.

--------------------------------------------------------------------------------
4.1. Built-in formatters                             *imgpaste-builtin-formatters*

The following formatters are built directly into imgpaste:

* `markdown`
* `tex`
* `plain`       Inserts only the image URL

--------------------------------------------------------------------------------
4.2. Defining a formatter                              *imgpaste-define-formatter*

Defining custom formatters is done in one of two days:
1. By using |g:ImgpasteFormatters|; only recommended if you aren't writing a
    plugin, or if you need to override builtins. Please do not use if you're
    writing a plugin, as this makes it harder for end-users to specify custom
    formatters.
2. By defining an autoload file with a specially named function

In both cases, a function with the signature `(imgurl: string)` is used. Also
note that the lookup order is the same as the above list; if
|g:ImgpasteFormatters| defines a formatter, it takes presedence over autoload
lookup.

Option 1: Variable~

See |g:ImgpasteFormatters| for some more details. For declaring formatters, this
is what a common setup may look like: >
    fun! FormatPotato(imgurl)
        
    endfun
    " You can set g:ImgpasteFormatMap directly without extend, but this is the
    " recommended approach
    let g:ImgpasteFormatMap = extend(get(g:, 'ImgpasteFormatMap', {}), {
        'potato': funcref("FormatPotato")
    })
<

Option 2: Autoload~

If you're using an autoload file, create a file named
`autoload/imgpaste/formatters/{format_name}.vim`, containing a function with the
signature mentioned earlier in this section. Here's a Vim9script example: >
    vim9script

    import autoload "imgpaste/util.vim" as util

    export def Format(imgurl: string)
        util.Insert(imgurl)
    enddef
<

And that's it. Specify the filetypes you want to use this formatter with
|g:ImgpasteFormatMap|, and imgpaste will automagically find the function you
defined -- provided it's in the autoload lookup path.

================================================================================
5. Keybinds                                                    *imgpaste-keybinds*

The default keybinds are:
* <C-i>: Pastes an image with path confirmation
* <M-i>: Pastes an image with path confirmation, but without printing it into
    the current document.
    Can be used to quickly add an image to a project without leaving vim

================================================================================
6. API functions                                              *imgpaste-functions*

--------------------------------------------------------------------------------
                                                            *imgpaste#InsertImage*

Parameters: 
- confirm: bool = false: Determines whether or not to show a prompt asking to
    confirm the paste path. Defaults to false.

    Note that the default in the built-in keybind is true.
- print: bool = True: Determines whether or not to invoke a printer in the
    document.

vim:ft=help
